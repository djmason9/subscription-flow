{
	"schemaVersion": "4",
	"info": {
		"name": "post-approver"
	},
	"parameter": {
		"properties": {
			"request": {
				"description": "The request"
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false
	},
	"start": "invoke-flow.4",
	"nodes": {
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "checkValid",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument of the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"// customfield_10050 = Jira custom field 'Subscription Self Link'\\n  // customfield_10052 = Jira custom field 'Subscription Name'\\n  \\n  let isProject = data.request.body.issue.fields.project.key === data.env.JIRA_PROJECT_KEY;\\n  let isDone = data.request.body.issue.fields.status.name === 'Done';\\n  \\n  let self_link_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_SELF_LINK_FIELD_NAME).id;\\n  let app_picker_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_PICKER_FIELD_NAME).id;\\n\\n  //https://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in\\n  let hasSelfLink = false;\\n  if (data.request.body.issue.fields[self_link_fieldname]) {hasSelfLink = true;}\\n  \\n  let hasApprovalSatatus = false;\\n  if (data.request.body.issue.fields[app_picker_fieldname] && data.request.body.issue.fields[app_picker_fieldname].value) {hasApprovalSatatus = true;}\\n  \\n    console.log(\\\"****** checkValid ********\\\\n\\\\n\\\");\\n    console.log(isProject,isDone,hasSelfLink,hasApprovalSatatus);\\n    console.log(\\\"**************\\\\n\\\\n\\\");\\n  \\n  return isProject && isDone && hasSelfLink && hasApprovalSatatus;\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises. `data` is the value of the Data parameter. `logger` is the API Builder logger. See the docs for more info: https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/flows/flow_nodes/javascript_flow_node/index.html"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"condition.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals",
			"method": "equals",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.result",
					"metaName": "Source",
					"metaDescription": "The input to test."
				},
				{
					"name": "value",
					"type": "boolean",
					"value": "true",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"invoke-flow.2"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [
						"http.2"
					],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "prepareApproveRequest",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument of the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let self_link_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_SELF_LINK_FIELD_NAME).id;\\n  let app_comment_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_COMMENT_FIELD_NAME).id;\\n  let app_picker_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_PICKER_FIELD_NAME).id;\\n  \\n  let url = data.request.body.issue.fields[self_link_fieldname];\\n  \\n  let approvalStatus = 'rejected';\\n \\n  if(data.request.body.issue.fields[app_picker_fieldname].value === 'Approve') {\\n     approvalStatus = 'approved';\\n  }\\n  \\n  //https://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in\\n  let reason = '';\\n  if (data.request.body.issue.fields[app_comment_fieldname]) {\\n    reason = data.request.body.issue.fields[app_comment_fieldname];\\n  }\\n  \\n  console.log(\\\"**************\\\\n\\\\n\\\");\\n    console.log(approvalStatus,reason);\\n    console.log(\\\"**************\\\\n\\\\n\\\");\\n  \\n  \\n   let body = {\\n      \\\"approval\\\": {\\n      \\\"state\\\": {\\n        \\\"name\\\":approvalStatus,\\n      \\t\\\"reason\\\": reason\\n      \\t}\\n      }\\n   };\\n   return {url,body};\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises. `data` is the value of the Data parameter. `logger` is the API Builder logger. See the docs for more info: https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/flows/flow_nodes/javascript_flow_node/index.html"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"rest.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"rest.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-restclient/rest",
			"name": "approveRequest",
			"method": "put",
			"parameters": [
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.result.body",
					"metaName": "Body",
					"metaDescription": "The content to send."
				},
				{
					"name": "url",
					"type": "jsonpath",
					"value": "$.result.url",
					"metaName": "URL",
					"metaDescription": "The target URL."
				},
				{
					"name": "headers",
					"type": "jsonpath",
					"value": "$.flowResponse",
					"metaName": "Headers",
					"metaDescription": "The HTTP headers to set."
				}
			],
			"outputs": {
				"2xx": {
					"routes": [
						"javascript.4"
					],
					"context": "$.response",
					"metaName": "2XX"
				},
				"3xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "3XX"
				},
				"4xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "4XX"
				},
				"5xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "5XX"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "PUT"
		},
		"http.1": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "204",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "prepareSendToTeams",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument of the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let url=data.env.MS_TEAMS_WEBHOOK_URL;\\n  \\n  let app_comment_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_COMMENT_FIELD_NAME).id;\\n  let subs_name_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_NAME_FIELD_NAME).id;\\n  let app_picker_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_PICKER_FIELD_NAME).id;\\n  \\n    let body = {\\n    text: `Access Request '${data.request.body.issue.fields[subs_name_fieldname]}' set to ${data.request.body.issue.fields[app_picker_fieldname].value} by ${data.request.body.user.displayName} in Jira and the access request workflow. Comments: ${data.request.body.issue.fields[app_comment_fieldname]}`\\n       \\n  };\\n   \\n  return {url,body};\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises. `data` is the value of the Data parameter. `logger` is the API Builder logger. See the docs for more info: https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/flows/flow_nodes/javascript_flow_node/index.html"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"rest.3"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"rest.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-restclient/rest",
			"name": "sendToTeams",
			"method": "post",
			"parameters": [
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.result.body",
					"metaName": "Body",
					"metaDescription": "The content to send."
				},
				{
					"name": "url",
					"type": "jsonpath",
					"value": "$.result.url",
					"metaName": "URL",
					"metaDescription": "The target URL."
				}
			],
			"outputs": {
				"2xx": {
					"routes": [
						"invoke-flow.1"
					],
					"context": "$.response",
					"metaName": "2XX"
				},
				"3xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "3XX"
				},
				"4xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "4XX"
				},
				"5xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "5XX"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "POST"
		},
		"javascript.5": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "prepareAddJiraComment",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument of the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let url = data.env.JIRA_URL+'/rest/api/2/issue/'+data.request.body.issue.key+'/comment';\\n  \\n  let app_comment_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_COMMENT_FIELD_NAME).id;\\n  let subs_name_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_NAME_FIELD_NAME).id;\\n  let app_picker_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_PICKER_FIELD_NAME).id;\\n  \\n  let body = {\\n    body: `Access Request ${data.request.body.issue.fields[subs_name_fieldname]} \\n    set to ${data.request.body.issue.fields[app_picker_fieldname].value} by \\n    ${data.request.body.user.displayName} in Jira and the access request workflow. \\n    Comments: ${data.request.body.issue.fields[app_comment_fieldname]}`\\n  };\\n  \\n  return {url, body};\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises. `data` is the value of the Data parameter. `logger` is the API Builder logger. See the docs for more info: https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/flows/flow_nodes/javascript_flow_node/index.html"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"rest.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"rest.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-restclient/rest",
			"name": "addJiraComment",
			"method": "post",
			"parameters": [
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.result.body",
					"metaName": "Body",
					"metaDescription": "The content to send."
				},
				{
					"name": "url",
					"type": "jsonpath",
					"value": "$.result.url",
					"metaName": "URL",
					"metaDescription": "The target URL."
				},
				{
					"name": "headers",
					"type": "jsonpath",
					"value": "$.prepareJiraHeadersFlowResponse",
					"metaName": "Headers",
					"metaDescription": "The HTTP headers to set."
				}
			],
			"outputs": {
				"2xx": {
					"routes": [
						"http.1"
					],
					"context": "$.response",
					"metaName": "2XX"
				},
				"3xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "3XX"
				},
				"4xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "4XX"
				},
				"5xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "5XX"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "POST"
		},
		"invoke-flow.1": {
			"type": "nodehandler://@axway/api-builder-plugin-invoke-flow/invoke-flow",
			"name": "prepareJiraHeaders",
			"method": "invokeFlow",
			"parameters": [
				{
					"name": "id",
					"type": "string",
					"value": "\"prepareJiraHeaders\"",
					"metaName": "Flow Listener ID",
					"metaDescription": "The ID of a previously configured `Flow Listener`."
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.5"
					],
					"context": "$.prepareJiraHeadersFlowResponse",
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Invoke Flow"
		},
		"invoke-flow.2": {
			"type": "nodehandler://@axway/api-builder-plugin-invoke-flow/invoke-flow",
			"name": "getAmplifyAPIHeaders",
			"method": "invokeFlow",
			"parameters": [
				{
					"name": "id",
					"type": "string",
					"value": "\"getAmplifyAPIHeaders\"",
					"metaName": "Flow Listener ID",
					"metaDescription": "The ID of a previously configured `Flow Listener`."
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.3"
					],
					"context": "$.flowResponse",
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Invoke Flow"
		},
		"invoke-flow.4": {
			"type": "nodehandler://@axway/api-builder-plugin-invoke-flow/invoke-flow",
			"name": "getJiraFields",
			"method": "invokeFlow",
			"parameters": [
				{
					"name": "id",
					"type": "string",
					"value": "\"getJiraFields\"",
					"metaName": "Flow Listener ID",
					"metaDescription": "The ID of a previously configured `Flow Listener`."
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.1"
					],
					"context": "$.getJiraFieldsFlowResponse",
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Invoke Flow"
		},
		"http.2": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "400",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"rest.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-restclient/rest",
			"name": "deleteAccessRequest",
			"method": "delete",
			"parameters": [
				{
					"name": "url",
					"type": "jsonpath",
					"value": "$.rejected.url",
					"metaName": "URL",
					"metaDescription": "The target URL."
				},
				{
					"name": "headers",
					"type": "jsonpath",
					"value": "$.flowResponse",
					"metaName": "Headers",
					"metaDescription": "The HTTP headers to set."
				}
			],
			"outputs": {
				"2xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "2XX"
				},
				"3xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "3XX"
				},
				"4xx": {
					"routes": [
						"http.3"
					],
					"context": "$.response",
					"metaName": "4XX"
				},
				"5xx": {
					"routes": [],
					"context": "$.response",
					"metaName": "5XX"
				},
				"error": {
					"routes": [
						"http.3"
					],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "DELETE"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "prepareReject",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument of the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let self_link_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_SELF_LINK_FIELD_NAME).id;\\n  let app_picker_fieldname = data.getJiraFieldsFlowResponse.find(c => c.name === data.env.JIRA_SUBS_APP_PICKER_FIELD_NAME).id;\\n  let url = data.request.body.issue.fields[self_link_fieldname];\\n  \\n  url = url.substr(0,url.indexOf(\\\"/approval\\\"));\\n  console.log(\\\"****** DELETE ******\\\\n\\\");\\n    console.log(url,data.request.body.issue.fields[app_picker_fieldname].value);\\n    console.log(\\\"************\\\\n\\\");\\n  \\n  if(data.request.body.issue.fields[app_picker_fieldname].value === 'Reject') {\\n    return {url:url,reject:true};\\n  }\\n  \\n  return false;\""
				}
			],
			"outputs": {
				"next": {
					"context": "$.rejected",
					"routes": [
						"condition.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"condition.2": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals",
			"method": "equals",
			"parameters": [
				{
					"name": "value",
					"type": "boolean",
					"value": "true",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				},
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.rejected.reject",
					"metaName": "Source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"rest.1"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		},
		"http.3": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "400",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		}
	}
}